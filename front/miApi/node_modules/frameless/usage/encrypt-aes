#!/usr/bin/env node
var frameless = require('../lib/frameless')
  , path      = require('path')
  , fs        = require('fs')
  , crypto    = require('crypto')
  ;

//
// save key so we can reuse it
//
frameless.save(true);

//
// the key is required. the first time we choose it gets stored
// and never gets asked again. you can then change it by using -k option
//
frameless(
  { name     : 'k'
  , required : true
  , load     : 'utf-8' // we should treat this as a filepath and readFile
  , 'default': path.join(frameless.tilde, '.ssh', 'id_rsa')
  }, function (opts) {
  var decipher = crypto.createDecipher('aes-256-cbc', opts.k)
    , cipher   = crypto.createCipher('aes-256-cbc', opts.k)
    , buffer   = ''
    ;

  function add_to_buffer(chunk) {
    buffer += chunk;
  }

  function stdin_end() {
    //
    // decrypt
    //
    if(frameless.argv.d) {
      buffer = decipher.update(buffer, 'hex', 'utf8') + decipher.final('utf8');
    }
    //
    // encrypt
    //
    else {
      buffer = cipher.update(buffer, 'utf8', 'hex') + cipher.final('hex');
    }

    //
    // write out the results
    //
    process.stdout.write(buffer);
  }

  //
  // open stdin from `|`
  //
  var stdin = process.openStdin();
  stdin.setEncoding('utf8');

  //
  // whenever there is data encrypt it
  //
  stdin.on('data', add_to_buffer);

  //
  // if we reached the end of input
  //
  stdin.on('end', stdin_end);

  //
  // `^D` EOF for stopping in tty mode
  //
  frameless.keypress('d', function () {
    stdin_end();
    process.stdin.pause();
  });
});

//
// this module gets tests against `test/encrypt-test.js`
// if you are curious about it feel free to take a peek in the source code
//

/*
 * name
 *      encrypt-aes -- encrypt and decrypt with aes-256-cbc
 *
 * synopsis
 *      encrypt-aes [-h | -v | -d] [-k=/some/encryption/key]
 *
 * description
 *      encrypt-aes encrypts and decrypts data. encrypt-aes reads raw data
 *      from stdin and writes encoded data as a continuous block to stdout
 *
 * options
 *      the following options are available:
 *
 *      -d                  decode incoming encrypted stream
 *
 *      -h
 *      --help               print usage summary and exit.
 *
 *      -v
 *      --version            print build version and exit.
 *
 *      -k=path              private key to be used
 */